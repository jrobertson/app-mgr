The app manager can be illustrated in 3 different examples:

# 1) A basic app-mgr example - load, run, and execture
# 2) Calling another app from within an app e.g. registry
# 3) Sharing variable values between apps

# 1) A basic app-mgr example

require 'app-mgr'

app = AppMgr.new


class Fun
  def initialize()
  end
end

class Fun_handler < Fun

  def initialize(opt={}, app_mgr=nil)
    super()
    puts opt[:config][:variables][:evening]  
  end

  def call_level8(params='')
    '<result>we are here</result>'
  end
end

h = {variables: {evening: 'yes'}}

app.load(name: 'fun', object: Fun_handler, config: h)
#=> "'fun' loaded"

app.run 'fun'
#=> "'fun' running ..."

app.execute 'fun', 'level8'
#=> "<result>we are here</result>"

# --------------

# 2) Calling another app from within an app

h = {variables: {evening: 'yes'}}

class Tree
  def initialize(opt={}, app_mgr=nil)

    @@app = app_mgr
  end

  def door()
    @@app.execute 'fun', 'level8'
  end
end

class Tree_handler < Tree

  def initialize(opt={}, app_mgr=nil)
    super(opt, app_mgr)
  end

  def call_door(params='')
    door()
  end
end


app.load(name: 'tree', object: Tree_handler)
#=> "'tree' loaded"

app.run 'tree'
#=> "'tree' running ..."

app.execute 'tree', 'door'

# 3) Sharing variable values between apps

shared =  {day: 'tuesday', weather: 'wind'}

class Car
  def initialize(opt={}, app_mgr=nil)
    @status = opt[:public]
    @@app = app_mgr
  end

  def start()
    puts 'weather: ' + @status[:weather]
    @status[:weather] = 'sunshine'
  end
end

class Car_handler < Car

  def initialize(opt={}, app_mgr=nil)
    super(opt, app_mgr)
  end

  def call_start(params='')
    start()
  end
end

app.load(name: 'car', object: Car_handler, public: shared)
#=> "'car' loaded"

app.run 'car'
#=> "'car' running ..."

app.execute 'car', 'start'

shared
#=> {:day=>"tuesday", :weather=>"sunshine"}

shared[:weather] = 'rain'
app.execute 'car', 'start'

shared
#=> {:day=>"tuesday", :weather=>"sunshine"}

===========

